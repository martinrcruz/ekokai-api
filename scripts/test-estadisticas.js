#!/usr/bin/env node

/**
 * Script para probar las rutas de estad√≠sticas
 * Verifica que los endpoints est√©n funcionando correctamente
 */

const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:8080';
const ENDPOINTS = [
  '/estadisticas/total-kilos',
  '/estadisticas/sucursal-top',
  '/estadisticas/kilos-por-mes',
  '/estadisticas/meta-mensual'
];

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function colorize(text, color) {
  return colors[color] + text + colors.reset;
}

async function testEndpoint(endpoint) {
  try {
    console.log(colorize(`üîç Probando: ${endpoint}`, 'blue'));
    
    const response = await axios.get(`${BASE_URL}${endpoint}`, {
      timeout: 10000
    });
    
    console.log(colorize(`‚úÖ ${endpoint} - OK`, 'green'));
    console.log(`   Status: ${response.status}`);
    console.log(`   Data:`, JSON.stringify(response.data, null, 2));
    
    return true;
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log(colorize(`‚ùå ${endpoint} - Servidor no disponible`, 'red'));
      console.log(`   Aseg√∫rate de que el backend est√© corriendo en ${BASE_URL}`);
    } else if (error.response) {
      if (error.response.status === 401) {
        console.log(colorize(`‚ùå ${endpoint} - No autorizado (401)`, 'yellow'));
        console.log(`   Se requiere autenticaci√≥n`);
      } else if (error.response.status === 500) {
        console.log(colorize(`‚ùå ${endpoint} - Error interno del servidor (500)`, 'red'));
        console.log(`   Error: ${error.response.data?.error || error.response.data?.message || 'Error desconocido'}`);
        
        // Si es el error del modelo, lo destacamos
        if (error.response.data?.error?.includes('aggregate is not a function')) {
          console.log(colorize(`   üîç PROBLEMA IDENTIFICADO: Modelo no registrado o funci√≥n aggregate no disponible`, 'red'));
          console.log(`   üí° Soluci√≥n: Verificar que el modelo EntregaResiduo est√© correctamente importado`);
        }
      } else {
        console.log(colorize(`‚ùå ${endpoint} - Error HTTP ${error.response.status}`, 'red'));
        console.log(`   ${error.response.data?.message || error.message}`);
      }
    } else {
      console.log(colorize(`‚ùå ${endpoint} - Error: ${error.message}`, 'red'));
    }
    return false;
  }
}

async function testAllEndpoints() {
  console.log(colorize('üöÄ Iniciando pruebas de las rutas de estad√≠sticas', 'bright'));
  console.log(colorize('==============================================', 'cyan'));
  console.log(`üìç URL Base: ${BASE_URL}\n`);
  
  let successCount = 0;
  let totalEndpoints = ENDPOINTS.length;
  
  for (const endpoint of ENDPOINTS) {
    const success = await testEndpoint(endpoint);
    if (success) successCount++;
    console.log(''); // L√≠nea en blanco entre pruebas
  }
  
  // Resumen
  console.log(colorize('üìä Resumen de Pruebas', 'bright'));
  console.log(colorize('====================', 'cyan'));
  console.log(`‚úÖ Endpoints exitosos: ${successCount}/${totalEndpoints}`);
  
  if (successCount === totalEndpoints) {
    console.log(colorize('\nüéâ ¬°Todas las rutas de estad√≠sticas est√°n funcionando correctamente!', 'green'));
    console.log(colorize('üí° El dashboard deber√≠a funcionar sin problemas', 'cyan'));
  } else if (successCount === 0) {
    console.log(colorize('\n‚ö†Ô∏è  Todas las rutas tienen problemas', 'yellow'));
    console.log(colorize('üîß Revisa los errores anteriores:', 'cyan'));
    console.log('   1. Verificar que los modelos est√©n registrados en Mongoose');
    console.log('   2. Verificar que la base de datos est√© conectada');
    console.log('   3. Verificar que los servicios est√©n funcionando');
  } else {
    console.log(colorize('\n‚ö†Ô∏è  Algunas rutas tienen problemas', 'yellow'));
    console.log(colorize('üîß Revisa los errores anteriores', 'cyan'));
  }
  
  console.log(colorize('\nüí° Para probar el frontend:', 'cyan'));
  console.log('   1. Navega al dashboard del administrador');
  console.log('   2. Verifica que se carguen las estad√≠sticas');
  console.log('   3. Prueba los gr√°ficos y m√©tricas');
}

// Ejecutar pruebas
if (require.main === module) {
  testAllEndpoints().catch(error => {
    console.error(colorize('‚ùå Error fatal en las pruebas:', 'red'), error);
    process.exit(1);
  });
}

module.exports = { testAllEndpoints };
